已有 package.json 安装模块依赖
-- https://www.cnblogs.com/sese/p/10119511.html
npm install -一键安装package.json里的所有依赖文件
npm install --dependencies -只安装 dependencies (运行依赖)文件
npm install --devDependencies -只安装 devDependencies (开发依赖)文件
npm install -g npm-check-updates -更新依赖到最新版本

安装
使用 npm 安装 -安装了 nodejs 内含 npm 指令
- 查看 node 版本
-- node -v
- 查看 npm 版本
-- npm -v
- 查看 cnpm 版本
-- cnpm -v
- 安装 nodejs 环境
-- 电脑管家 - 软件管理 搜索安装
- 安装 cnpm 淘宝 NPM 镜像命令
-- npm install cnpm -g 全局安装
-- 使用 cnpm 时报错
--- 原因是： 首次在计算机上启动 Windows PowerShell 时，现用执行策略很可能是 Restricted（默认设置）。Restricted 策略不允许任何脚本运行。
--- 1. win+x 打开PowerShell（管理员）
--- 2. set-ExecutionPolicy RemoteSigned //设置为打开
--- 3. 键入Y或者A,同意
--- 4. 执行get-executionpolicy查看是否更改成功，为RemoteSigned表示成功
--- 参考链接：https://blog.csdn.net/l_x_cser/article/details/104956657
--- 参考链接：https://www.dwhd.org/20180213_114134.html
- 安装 vue
-- cnpm install vue
- 创建 vue-cli 项目
-- cnpm install --global vue-cli
-- vue init webpack my-project
- 进入项目并运行
-- cd my-project
-- cnpm install
-- cnpm run dev
- 浏览器访问 http://localhost:8080

部署
- 打包部署至生产环境

vue 请求接口

vue登录并用vuex保存token

数据类型
- 数字
- 字符串
- 布尔
- 数组
- 对象
-- 数组对象

-- 绑定的 html DOM 元素（id="app"）
el: '#app'

-- vue-cli 推荐使用格式
data() {
  return 
}
-- 普通格式
data: {
  num: 1,
  string: '1',
}

-- html 中可以直接使用 details() 方法
method: {
  details: function() {
    return this.num += 1;
  }
}

-- 文本值
-- html DOM 中输出对象属性和函数返回值
{{  }}

-- 表达式
{{ 5+5 }}
{{ ok ? 'YES' : 'NO' }}
{{ message.split('').reverse().join('') }}

-- vue 实例属性与方法
前缀 $，以便与用户定义的属性区分开来

指令
-- 指令是带有 v- 前缀的特殊属性
-- 指令用于在表达式的值改变时，将某些行为应用到DOM上。
v-html --html --输出 html 代码
v-bind --属性 --用于绑定属性（class id ...）--缩写：
v-if --条件判断
v-else
v-else-if
v-show --根据条件展示元素，类似于 v-if
v-on --监听DOM事件 --缩写：@
-- 当绑定 v-on:click 事件时，想传入参数同时也传入当前元素
    <button v-on:click="say('hi',$event)">say hi</button>

v-model --双向数据绑定 --用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值
v-for --循环语句 --需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名 --可以绑定数据到数组来渲染一个列表 --可以迭代整数、数组及对象 --可以通过一个对象的属性来迭代数据 --可以循环整数

捕获事件和冒泡事件(默认)是两种事件流,事件捕获是从document到触发事件的那个元素;冒泡事件是从下向上的触发事件

自定义组件
Vue.directive(tagName, option)

过滤器
filters: {
  
}

计算属性
computed: {
  
}
computed vs methods
- 相同
-- 可以使用 methods 来替代 computed，效果上两个都是一样的
- 不同
-- 首先最明显的不同 就是调用的时候，methods要加上（）
-- computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值
-- methods ，在重新渲染的时候，函数总会重新调用执行
-- computed 对象内的方法如果在初始化时绑定到元素上的事件会先执行一次这个方法 ，而 methods 内的方法则不会
- 可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。

computed getter
computed setter

监听属性
watch: {
  
}
-- $watch 是一个实例方法


"prop"，类似于一个自定义 attribute。
设置新的属性 --Vue.set(）方法

组件
- 注册组件：Vue.component(tagName, options)
- 调用组件：<tagName></tagName>
-- 全局组件
-- 局部组件
component : {
  
}

自定义事件
使用 $on(eventName) 监听事件
使用 $emit(eventName) 触发事件

混入
-- 全局混入
-- 局部混入
-- Vue.mixin({  })
